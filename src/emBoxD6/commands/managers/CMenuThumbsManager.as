package emBoxD6.commands.managers   {
import com.asual.swfaddress.SWFAddress;
import emBox.commands.*;
import emBox.commands.managers.CThumbsManager;
import emBox.interfaces.IAppears;
import emBox.core.SoundPlayer;
import emBox.dataObjects.*;
import emBox.EmBox;
import emBox.utils.xml.IndexAmoungNodes;
import emBox.vos.VO;
import emBoxD6.vos.VODrupalNode;
import emBoxD6.vos.VOMenu;
import flash.display.DisplayObjectContainer;
import flash.events.*;
import flash.utils.*;


public class CMenuThumbsManager extends CThumbsManager{
  private var aVOMenu:VOMenu;
  protected var menuList:ACollectionDispatcher;
  protected var voList:ACollectionDispatcher;

  /**
   * Clicks update the Global list
   * and updates to local menuList when global ones exist
   * @param	voList the voList the one and only
   * @param	menuList the local list
   * @param	instancesList he instances generated by the local menuList
   * @param	location
   */
  public function CMenuThumbsManager(
    voList:ACollectionDispatcher,
    menuList:ACollectionDispatcher,
    instancesList:Array,
    container:DisplayObjectContainer
  ){
    this.voList = voList;
    this.menuList = menuList;
		super( menuList, instancesList, container );
  }

  override protected function doIn():void {
    voList.addEventListener(ACollectionDispatcher.SET_POINTER_TRIGGERED, onGlobalModelPointer);
    super.doIn();
  }
  override protected function doOut():void {
    voList.removeEventListener(ACollectionDispatcher.SET_POINTER_TRIGGERED, onGlobalModelPointer);
    super.doOut();
  }

  override protected function onClick(e:MouseEvent):void {
		if (!isClear(e)) return;
		SoundPlayer.playSoundFx(EmBox.Sound_Clik);
		aThumb.hover.executeOut();
		var voMenuRequIndex:int = instancesList.indexOf(e.target);
    aVOMenu = menuList.list[voMenuRequIndex] as VOMenu;
    /// if a vo exists in voLisit wait for voList event to update menu
    var aVO:VO = voList.objectByPropertyWithValue("path", aVOMenu.path) as VO;
    if (aVO) {
      /// update global list
      voList.pointer = voList.list.indexOf(aVO);
    }else {
      /// It doesnt exist so let the menuList know
      menuList.pointer = voMenuRequIndex;
      //voList.pointer = -1;
    }
	}
	
  protected function onGlobalModelPointer(e:Event):void {
    if (voList.pointer == -1) {
      menuList.pointer = -1;
      return;
    }
    var path:String = voList.pointedObj["path"];
    /// Get the VOMenu from the local
    aVOMenu = menuList.objectByPropertyWithValue("path", path) as VOMenu;
    if (aVOMenu) {
      /// Update local menuList (menuList )
      var reqInx:int = menuList.list.indexOf( aVOMenu );
      menuList.pointer = reqInx;
    }else {
      menuList.pointer = -1;
    }
  }



  override protected function postExecuteOut():void {
    /// Reset menu on exit
    /// onGlobalModelPointer() will match the calling vo with the
    /// local one which will result not to be able click hover again the
    /// local one...
    menuList.pointer = -1;
  }

  public function stopListeningGlb():void {
    voList.removeEventListener(ACollectionDispatcher.SET_POINTER_TRIGGERED, onGlobalModelPointer);
  }

  public function startListeningGlb():void {
    voList.addEventListener(ACollectionDispatcher.SET_POINTER_TRIGGERED, onGlobalModelPointer);
  }
}
}